#!/bin/bash

# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Global counters
EXECUTED=0
FAILED=0

# Display successful as well as failed tests (useful if they are slow).
VERBOSE=false


test_eval() {
    JSONNET_CMD="$1"
    JSONNET_FILE="$2"
    EXPECTED_EXIT_CODE="$3"
    GOLDEN_OUTPUT="$4"
    GOLDEN_KIND="$5"

    TEST_OUTPUT="$($JSONNET_CMD "$JSONNET_FILE" 2>&1)"
    TEST_EXIT_CODE="$?"
    EXECUTED=$((EXECUTED + 1))

    if [ "$TEST_EXIT_CODE" -ne "$EXPECTED_EXIT_CODE" ] ; then
        FAILED=$((FAILED + 1))
        echo -e "\e[31;1mFAIL\e[0m \e[1m(exit code)\e[0m: \e[36m$JSONNET_FILE\e[0m"
        echo "This run's output:"
        echo "$TEST_OUTPUT"
        return 1
    fi

    case "$GOLDEN_KIND" in
        "REGEX")
        if [[ ! "$TEST_OUTPUT" =~ $GOLDEN_OUTPUT ]] ; then
            FAILED=$((FAILED + 1))
            echo -e "\e[31;1mFAIL\e[0m \e[1m(regex mismatch)\e[0m: \e[36m$JSONNET_FILE\e[0m"
            echo "This run's output:"
            echo "$TEST_OUTPUT"
            return 1
        fi
        ;;

        "PLAIN")
        if [ "$TEST_OUTPUT" != "$GOLDEN_OUTPUT" ] ; then
            FAILED=$((FAILED + 1))
            echo -e "\e[31;1mFAIL\e[0m \e[1m(output mismatch)\e[0m: \e[36m$JSONNET_FILE\e[0m"
            echo "This run's output:"
            echo "$TEST_OUTPUT"
            echo "Expected:"
            echo "$GOLDEN_OUTPUT"
            return 1
        fi
        ;;

        *)
        echo "Unrecognized GOLDEN_KIND: $GOLDEN_KIND" >&2
        exit 1
        ;;
    esac

    $($VERBOSE) && echo -e "\e[32mSUCCESS\e[0m: \e[36m$JSONNET_FILE\e[0m"
}
